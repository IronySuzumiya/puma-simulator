# Defines all the components needed by a node
# Tile, Network-on-Chip (NOC)

import sys
sys.path.insert (0, '/home/ankitaay/dpe/include')
import config as cfg
import constants as param

# define an noc class - deals with data transfers between tiles
# 1. send_queue in each tile is a prt of noc
# 2. noc class here does the decoding part
class noc (object):

    def __init__ (self):
        # define num_access (both inter and intra node)
        self.num_access_intra = 0
        self.num_access_inter = 0

        # define latency
        self.latency_intra = param.noc_latency_intranode
        self.latency_inter = param.noc_latency_internode

    def getLatency (self, target_addr):
        # Need to FIX this - MSB of node_addr would be 1 fro internode transfer
        #inter_flag = target_addr[0]
        #if (inter_flag == 1):
        #    return self.latency_inter
        return self.latency_intra

    # Propagate just adds to inter_noc power or ht_power based on src & dest address
    # target addr is same as tile addr (tiles are numbered from 0 to num_node*num_tile+1) -- includes 2 dummy tiles
    def propagate (self, target_addr):
        #inter_flag = target_addr[0]
        inter_flag = 0
        if (inter_flag == 1):
            self.num_access_inter += 1
        else:
            self.num_access_intra += 1

        assert ((type(target_addr) == int) and \
                (target_addr < cfg.num_node * cfg.num_tile_compute + 2)), \
                'target addr is invalid - check format and length'
        return target_addr

